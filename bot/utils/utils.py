# utils.py

import json
import os
import asyncio

from discord import File
from dotenv import load_dotenv
from PIL import Image, ImageFont, ImageDraw
from functools import partial

from ..resources import Config


ABS_ROOT_DIR = os.path.abspath(os.curdir)
TEMPLATES_DIR = os.path.join(ABS_ROOT_DIR, 'assets', 'img', 'templates')
FONTS_DIR = os.path.join(ABS_ROOT_DIR, 'assets', 'fonts')
SAVE_IMG_DIR = os.path.join(ABS_ROOT_DIR, 'assets', 'img')

load_dotenv()

with open('translations.json', encoding="utf8") as f:
    translations = json.load(f)


def align_text(text, length, align='center'):
    """ Center the text within whitespace of input length. """
    if length < len(text):
        return text

    whitespace = length - len(text)

    if align == 'center':
        pre = round(whitespace / 2)
        post = round(whitespace / 2)
    elif align == 'left':
        pre = 0
        post = whitespace
    elif align == 'right':
        pre = whitespace
        post = 0
    else:
        raise ValueError('Align argument must be "center", "left" or "right"')

    return ' ' * pre + text + ' ' * post


async def delete_msgs(messages):
    """"""
    for msg in messages:
        try:
            await msg.delete()
        except:
            pass


class Timer:
    def __init__(self, timeout, callback):
        self._timeout = timeout
        self._callback = callback
        self._task = asyncio.ensure_future(self._job())

    async def _job(self):
        await asyncio.sleep(self._timeout)
        await self._callback()

    def cancel(self):
        self._task.cancel()


class Utils:
    """"""

    FLAG_CODES = {
        'ðŸ‡¦ðŸ‡¨': 'AC', 'ðŸ‡¦ðŸ‡©': 'AD', 'ðŸ‡¦ðŸ‡ª': 'AE', 'ðŸ‡¦ðŸ‡«': 'AF', 'ðŸ‡¦ðŸ‡¬': 'AG', 'ðŸ‡¦ðŸ‡®': 'AI', 'ðŸ‡¦ðŸ‡±': 'AL',
        'ðŸ‡¦ðŸ‡²': 'AM', 'ðŸ‡¦ðŸ‡´': 'AO', 'ðŸ‡¦ðŸ‡¶': 'AQ', 'ðŸ‡¦ðŸ‡·': 'AR', 'ðŸ‡¦ðŸ‡¸': 'AS', 'ðŸ‡¦ðŸ‡¹': 'AT', 'ðŸ‡¦ðŸ‡º': 'AU',
        'ðŸ‡¦ðŸ‡¼': 'AW', 'ðŸ‡¦ðŸ‡½': 'AX', 'ðŸ‡¦ðŸ‡¿': 'AZ', 'ðŸ‡§ðŸ‡¦': 'BA', 'ðŸ‡§ðŸ‡§': 'BB', 'ðŸ‡§ðŸ‡©': 'BD', 'ðŸ‡§ðŸ‡ª': 'BE', 
        'ðŸ‡§ðŸ‡«': 'BF', 'ðŸ‡§ðŸ‡¬': 'BG', 'ðŸ‡§ðŸ‡­': 'BH', 'ðŸ‡§ðŸ‡®': 'BI', 'ðŸ‡§ðŸ‡¯': 'BJ', 'ðŸ‡§ðŸ‡±': 'BL', 'ðŸ‡§ðŸ‡²': 'BM',
        'ðŸ‡§ðŸ‡³': 'BN', 'ðŸ‡§ðŸ‡´': 'BO', 'ðŸ‡§ðŸ‡¶': 'BQ', 'ðŸ‡§ðŸ‡·': 'BR', 'ðŸ‡§ðŸ‡¸': 'BS', 'ðŸ‡§ðŸ‡¹': 'BT', 'ðŸ‡§ðŸ‡»': 'BV', 
        'ðŸ‡§ðŸ‡¼': 'NW', 'ðŸ‡§ðŸ‡¾': 'BY', 'ðŸ‡§ðŸ‡¿': 'BZ', 'ðŸ‡¨ðŸ‡¦': 'CA', 'ðŸ‡¨ðŸ‡¨': 'CC', 'ðŸ‡¨ðŸ‡©': 'CD', 'ðŸ‡¨ðŸ‡«': 'CF', 
        'ðŸ‡¨ðŸ‡¬': 'CG', 'ðŸ‡¨ðŸ‡­': 'CH', 'ðŸ‡¨ðŸ‡®': 'CI', 'ðŸ‡¨ðŸ‡°': 'CK', 'ðŸ‡¨ðŸ‡±': 'CL', 'ðŸ‡¨ðŸ‡²': 'CM', 'ðŸ‡¨ðŸ‡³': 'CN', 
        'ðŸ‡¨ðŸ‡´': 'CO', 'ðŸ‡¨ðŸ‡µ': 'CP', 'ðŸ‡¨ðŸ‡·': 'CR', 'ðŸ‡¨ðŸ‡º': 'CU', 'ðŸ‡¨ðŸ‡»': 'CV', 'ðŸ‡¨ðŸ‡¼': 'CW', 'ðŸ‡¨ðŸ‡½': 'CX', 
        'ðŸ‡¨ðŸ‡¾': 'CY', 'ðŸ‡¨ðŸ‡¿': 'CZ', 'ðŸ‡©ðŸ‡ª': 'DE', 'ðŸ‡©ðŸ‡¬': 'DG', 'ðŸ‡©ðŸ‡¯': 'DJ', 'ðŸ‡©ðŸ‡°': 'DK', 'ðŸ‡©ðŸ‡²': 'DM', 
        'ðŸ‡©ðŸ‡´': 'DO', 'ðŸ‡©ðŸ‡¿': 'DZ', 'ðŸ‡ªðŸ‡¦': 'EA', 'ðŸ‡ªðŸ‡¨': 'EC', 'ðŸ‡ªðŸ‡ª': 'EE', 'ðŸ‡ªðŸ‡¬': 'EG', 'ðŸ‡ªðŸ‡­': 'EH', 
        'ðŸ‡ªðŸ‡·': 'ER', 'ðŸ‡ªðŸ‡¸': 'ES', 'ðŸ‡ªðŸ‡¹': 'ET', 'ðŸ‡ªðŸ‡º': 'EU', 'ðŸ‡«ðŸ‡®': 'FI', 'ðŸ‡«ðŸ‡¯': 'FJ', 'ðŸ‡«ðŸ‡°': 'FK', 
        'ðŸ‡«ðŸ‡²': 'FM', 'ðŸ‡«ðŸ‡´': 'FO', 'ðŸ‡«ðŸ‡·': 'FR', 'ðŸ‡¬ðŸ‡¦': 'GA', 'ðŸ‡¬ðŸ‡§': 'GB', 'ðŸ‡¬ðŸ‡©': 'GD', 'ðŸ‡¬ðŸ‡ª': 'GE', 
        'ðŸ‡¬ðŸ‡«': 'GF', 'ðŸ‡¬ðŸ‡¬': 'GG', 'ðŸ‡¬ðŸ‡­': 'GH', 'ðŸ‡¬ðŸ‡®': 'GI', 'ðŸ‡¬ðŸ‡±': 'GL', 'ðŸ‡¬ðŸ‡²': 'GM', 'ðŸ‡¬ðŸ‡³': 'GN', 
        'ðŸ‡¬ðŸ‡µ': 'GP', 'ðŸ‡¬ðŸ‡¶': 'GQ', 'ðŸ‡¬ðŸ‡·': 'GR', 'ðŸ‡¬ðŸ‡¸': 'GS', 'ðŸ‡¬ðŸ‡¹': 'GT', 'ðŸ‡¬ðŸ‡º': 'GU', 'ðŸ‡¬ðŸ‡¼': 'GW', 
        'ðŸ‡¬ðŸ‡¾': 'GY', 'ðŸ‡­ðŸ‡°': 'HK', 'ðŸ‡­ðŸ‡²': 'HM', 'ðŸ‡­ðŸ‡³': 'HN', 'ðŸ‡­ðŸ‡·': 'HR', 'ðŸ‡­ðŸ‡¹': 'HT', 'ðŸ‡­ðŸ‡º': 'HU', 
        'ðŸ‡®ðŸ‡¨': 'IC', 'ðŸ‡®ðŸ‡©': 'ID', 'ðŸ‡®ðŸ‡ª': 'IE', 'ðŸ‡®ðŸ‡±': 'IL', 'ðŸ‡®ðŸ‡²': 'IM', 'ðŸ‡®ðŸ‡³': 'IN', 'ðŸ‡®ðŸ‡´': 'IO', 
        'ðŸ‡®ðŸ‡¶': 'IQ', 'ðŸ‡®ðŸ‡·': 'IR', 'ðŸ‡®ðŸ‡¸': 'IS', 'ðŸ‡®ðŸ‡¹': 'IT', 'ðŸ‡¯ðŸ‡ª': 'JE', 'ðŸ‡¯ðŸ‡²': 'JM', 'ðŸ‡¯ðŸ‡´': 'JO', 
        'ðŸ‡¯ðŸ‡µ': 'JP', 'ðŸ‡°ðŸ‡ª': 'KE', 'ðŸ‡°ðŸ‡¬': 'KG', 'ðŸ‡°ðŸ‡­': 'KH', 'ðŸ‡°ðŸ‡®': 'KI', 'ðŸ‡°ðŸ‡²': 'KM', 'ðŸ‡°ðŸ‡³': 'KN', 
        'ðŸ‡°ðŸ‡µ': 'KP', 'ðŸ‡°ðŸ‡·': 'KR', 'ðŸ‡°ðŸ‡¼': 'KW', 'ðŸ‡°ðŸ‡¾': 'KY', 'ðŸ‡°ðŸ‡¿': 'KZ', 'ðŸ‡±ðŸ‡¦': 'LA', 'ðŸ‡±ðŸ‡§': 'LB', 
        'ðŸ‡±ðŸ‡¨': 'LC', 'ðŸ‡±ðŸ‡®': 'LI', 'ðŸ‡±ðŸ‡°': 'LK', 'ðŸ‡±ðŸ‡·': 'LR', 'ðŸ‡±ðŸ‡¸': 'LS', 'ðŸ‡±ðŸ‡¹': 'LT', 'ðŸ‡±ðŸ‡º': 'LU', 
        'ðŸ‡±ðŸ‡»': 'LV', 'ðŸ‡±ðŸ‡¾': 'LY', 'ðŸ‡²ðŸ‡¦': 'MS', 'ðŸ‡²ðŸ‡¨': 'MC', 'ðŸ‡²ðŸ‡©': 'MD', 'ðŸ‡²ðŸ‡ª': 'ME', 'ðŸ‡²ðŸ‡«': 'MF', 
        'ðŸ‡²ðŸ‡¬': 'MG', 'ðŸ‡²ðŸ‡­': 'MH', 'ðŸ‡²ðŸ‡°': 'MK', 'ðŸ‡²ðŸ‡±': 'ML', 'ðŸ‡²ðŸ‡²': 'MM', 'ðŸ‡²ðŸ‡³': 'MN', 'ðŸ‡²ðŸ‡´': 'MO', 
        'ðŸ‡²ðŸ‡µ': 'MP', 'ðŸ‡²ðŸ‡¶': 'MQ', 'ðŸ‡²ðŸ‡·': 'MR', 'ðŸ‡²ðŸ‡¸': 'MS', 'ðŸ‡²ðŸ‡¹': 'MT', 'ðŸ‡²ðŸ‡º': 'MU', 'ðŸ‡²ðŸ‡»': 'MV', 
        'ðŸ‡²ðŸ‡¼': 'MW', 'ðŸ‡²ðŸ‡½': 'MX', 'ðŸ‡²ðŸ‡¾': 'MY', 'ðŸ‡²ðŸ‡¿': 'MZ', 'ðŸ‡³ðŸ‡¦': 'NA', 'ðŸ‡³ðŸ‡¨': 'NC', 'ðŸ‡³ðŸ‡ª': 'NE', 
        'ðŸ‡³ðŸ‡«': 'NF', 'ðŸ‡³ðŸ‡¬': 'NG', 'ðŸ‡³ðŸ‡®': 'NI', 'ðŸ‡³ðŸ‡±': 'NL', 'ðŸ‡³ðŸ‡´': 'NO', 'ðŸ‡³ðŸ‡µ': 'NP', 'ðŸ‡³ðŸ‡·': 'NR', 
        'ðŸ‡³ðŸ‡º': 'NU', 'ðŸ‡³ðŸ‡¿': 'NZ', 'ðŸ‡´ðŸ‡²': 'OM', 'ðŸ‡µðŸ‡¦': 'PA', 'ðŸ‡µðŸ‡ª': 'PE', 'ðŸ‡µðŸ‡«': 'PF', 'ðŸ‡µðŸ‡¬': 'PG', 
        'ðŸ‡µðŸ‡­': 'PH', 'ðŸ‡µðŸ‡°': 'PK', 'ðŸ‡µðŸ‡±': 'PL', 'ðŸ‡µðŸ‡²': 'PM', 'ðŸ‡µðŸ‡³': 'PN', 'ðŸ‡µðŸ‡·': 'PR', 'ðŸ‡µðŸ‡¸': 'PS', 
        'ðŸ‡µðŸ‡¹': 'PT', 'ðŸ‡µðŸ‡¼': 'PW', 'ðŸ‡µðŸ‡¾': 'PY', 'ðŸ‡¶ðŸ‡¦': 'QA', 'ðŸ‡·ðŸ‡ª': 'RE', 'ðŸ‡·ðŸ‡´': 'RO', 'ðŸ‡·ðŸ‡¸': 'RS', 
        'ðŸ‡·ðŸ‡º': 'RU', 'ðŸ‡·ðŸ‡¼': 'RW', 'ðŸ‡¸ðŸ‡¦': 'SA', 'ðŸ‡¸ðŸ‡§': 'SB', 'ðŸ‡¸ðŸ‡¨': 'SC', 'ðŸ‡¸ðŸ‡©': 'SD', 'ðŸ‡¸ðŸ‡ª': 'SE', 
        'ðŸ‡¸ðŸ‡¬': 'SG', 'ðŸ‡¸ðŸ‡­': 'SH', 'ðŸ‡¸ðŸ‡®': 'SI', 'ðŸ‡¸ðŸ‡¯': 'SJ', 'ðŸ‡¸ðŸ‡°': 'SK', 'ðŸ‡¸ðŸ‡±': 'SL', 'ðŸ‡¸ðŸ‡²': 'SM', 
        'ðŸ‡¸ðŸ‡³': 'SN', 'ðŸ‡¸ðŸ‡´': 'SO', 'ðŸ‡¸ðŸ‡·': 'SR', 'ðŸ‡¸ðŸ‡¸': 'SS', 'ðŸ‡¸ðŸ‡¹': 'ST', 'ðŸ‡¸ðŸ‡»': 'EV', 'ðŸ‡¸ðŸ‡½': 'SX', 
        'ðŸ‡¸ðŸ‡¾': 'SY', 'ðŸ‡¸ðŸ‡¿': 'SZ', 'ðŸ‡¹ðŸ‡¦': 'TA', 'ðŸ‡¹ðŸ‡¨': 'TC', 'ðŸ‡¹ðŸ‡©': 'TD', 'ðŸ‡¹ðŸ‡«': 'TF', 'ðŸ‡¹ðŸ‡¬': 'TG', 
        'ðŸ‡¹ðŸ‡­': 'TH', 'ðŸ‡¹ðŸ‡¯': 'TJ', 'ðŸ‡¹ðŸ‡°': 'TK', 'ðŸ‡¹ðŸ‡±': 'TL', 'ðŸ‡¹ðŸ‡²': 'TM', 'ðŸ‡¹ðŸ‡³': 'TN', 'ðŸ‡¹ðŸ‡´': 'TO', 
        'ðŸ‡¹ðŸ‡·': 'TR', 'ðŸ‡¹ðŸ‡¹': 'TT', 'ðŸ‡¹ðŸ‡»': 'TV', 'ðŸ‡¹ðŸ‡¼': 'TW', 'ðŸ‡¹ðŸ‡¿': 'TZ', 'ðŸ‡ºðŸ‡¦': 'UA', 'ðŸ‡ºðŸ‡¬': 'UG', 
        'ðŸ‡ºðŸ‡²': 'UM', 'ðŸ‡ºðŸ‡³': 'UN', 'ðŸ‡ºðŸ‡¸': 'US', 'ðŸ‡ºðŸ‡¾': 'UY', 'ðŸ‡ºðŸ‡¿': 'UZ', 'ðŸ‡»ðŸ‡¦': 'VA', 'ðŸ‡»ðŸ‡¨': 'VC', 
        'ðŸ‡»ðŸ‡ª': 'VE', 'ðŸ‡»ðŸ‡¬': 'VG', 'ðŸ‡»ðŸ‡®': 'VI', 'ðŸ‡»ðŸ‡³': 'VN', 'ðŸ‡»ðŸ‡º': 'VU', 'ðŸ‡¼ðŸ‡«': 'WF', 'ðŸ‡¼ðŸ‡¸': 'WS', 
        'ðŸ‡½ðŸ‡°': 'XK', 'ðŸ‡¾ðŸ‡ª': 'YE', 'ðŸ‡¾ðŸ‡¹': 'YT', 'ðŸ‡¿ðŸ‡¦': 'ZA', 'ðŸ‡¿ðŸ‡²': 'ZM', 'ðŸ‡¿ðŸ‡¼': 'ZW'
    }

    EMOJI_NUMBERS = [
        u'\u0030\u20E3',
        u'\u0031\u20E3',
        u'\u0032\u20E3',
        u'\u0033\u20E3',
        u'\u0034\u20E3',
        u'\u0035\u20E3',
        u'\u0036\u20E3',
        u'\u0037\u20E3',
        u'\u0038\u20E3',
        u'\u0039\u20E3',
        u'\U0001F51F'
    ]

    @staticmethod
    def trans(key, *args):
        """"""
        translated = translations[Config.lang][key]
        if args:
            return translated.format(*args)

        return translated

    @staticmethod
    def clear_messages(messages, timer=15):
        """"""
        cb = partial(delete_msgs, messages)
        Timer(timer, cb)

    @staticmethod
    def generate_leaderboard_img(playerstats, season=None):
        """"""
        img = Image.open(TEMPLATES_DIR + "/leaderboard.png")
        font = ImageFont.truetype(FONTS_DIR + "/ARIALUNI.TTF", 25)
        fontbig = ImageFont.truetype(FONTS_DIR + "/ARIALUNI.TTF", 28)
        draw = ImageDraw.Draw(img)

        draw.text((1, 45), align_text(
            f'Season: {season.name}' if season else 'General Stats', 130), font=fontbig)

        for idx, p in enumerate(playerstats):
            draw.text((73, 235+65*idx), str(p.name)[:18], font=font)
            draw.text((340, 235+65*idx), str(p.kills), font=font)
            draw.text((500, 235+65*idx), str(p.deaths), font=font)
            draw.text((660, 235+65*idx), str(p.played), font=font)
            draw.text((820, 235+65*idx), str(p.wins), font=font)
            draw.text((980, 235+65*idx), str(p.rating), font=font)

        img.save(SAVE_IMG_DIR + '/leaderboard.png')
        return File(SAVE_IMG_DIR + '/leaderboard.png')

    @staticmethod
    def generate_statistics_img(stats, season=None):
        """"""
        img = Image.open(TEMPLATES_DIR + "/statistics.png")
        font = ImageFont.truetype(FONTS_DIR + "/ARIALUNI.TTF", 25)
        draw = ImageDraw.Draw(img)
        fontbig = ImageFont.truetype(FONTS_DIR + "/ARIALUNI.TTF", 28)

        draw.text((1, 40), align_text(
            f'Season: {season.name}' if season else 'General Stats', 55), font=fontbig)

        draw.text((1, 90), align_text(stats.name[:14], 55), font=fontbig)

        draw.text((46, 226+109*0), align_text(str(stats.kills), 14), font=font)
        draw.text((46, 226+109*1), align_text(str(stats.deaths), 14), font=font)
        draw.text((46, 226+109*2), align_text(str(stats.assists), 14), font=font)
        draw.text((46, 226+109*3), align_text(str(stats.kdr), 14), font=font)
        draw.text((46, 226+109*4), align_text(str(stats.headshots), 14), font=font)

        draw.text((365, 226+109*0), align_text(f'{stats.hsp}%', 20), font=font)
        draw.text((365, 226+109*1),
                  align_text(str(stats.played), 20), font=font)
        draw.text((365, 226+109*2), align_text(str(stats.wins), 20), font=font)
        draw.text((365, 226+109*3),
                  align_text(f'{stats.win_percent}%', 20), font=font)
        draw.text((365, 226+109*4), align_text(str(stats.rating), 20), font=font)

        img.save(SAVE_IMG_DIR + '/statistics.png')
        return File(SAVE_IMG_DIR + '/statistics.png')
